// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Diagnostics;

namespace FataAquana
{
	public partial class PersoonController : NSViewController
	{
		#region private variables
		private PersonenController _parentController;
		private PersoonModel _persoon;

		private GevolgdeOpleidingenDS dsGevolgdeOpleidingen = null;
		private AankopenDS dsAankopen = null;
		private OnderhoudDS dsOnderhoud = null;
		private LidmaatschappenDS dsLidmaatschappen = null;

		public GevolgdeOpleidingModel SelectedGevolgdeOpleiding;
		public AankoopModel SelectedAankoop;
		public InOnderhoudModel SelectedOnderhoud;
		public ClublidmaatschapModel SelectedLidmaatschap;
		#endregion

		#region Constructors
		public PersoonController(IntPtr handle) : base (handle)
		{
		}
		#endregion

		public override void AwakeFromNib()
		{
			Debug.WriteLine("Start: PersoonController.AwakeFromNib");

			base.AwakeFromNib();

			_parentController = this.PresentingViewController as PersonenController;
			if (_parentController != null)
			{
				Persoon = _parentController.SelectedPersoon;

				if (Persoon != null)
				{
					LoadTables();
				}
				else
				{
					Persoon = new PersoonModel();
				}
			}

			Debug.WriteLine("Einde: PersoonController.AwakeFromNib");
		}

		[Export("Persoon")]
		public PersoonModel Persoon
		{
			get { return _persoon; }
			set
			{
				WillChangeValue("Persoon");
				_persoon = value;
				DidChangeValue("Persoon");
			}
		}

		partial void SaveButton(NSButton sender)
		{
			Debug.WriteLine("Start: PersoonController.CancelButton");

			if (_parentController.SelectedPersoon != null)
			{
				Persoon.Update(AppDelegate.Conn);
			}
			else
			{
				Persoon.Create(AppDelegate.Conn);
				_parentController.dsPersonen.AddPersoon(Persoon);
			}

			if (_parentController != null)
			{
				_parentController.ReloadTable();
			}

			DismissController(this);

			Debug.WriteLine("Einde: PersoonController.CancelButton");
		}

		partial void CancelButton(NSButton sender)
		{
			Debug.WriteLine("Start: PersoonController.CancelButton");

			DismissController(this);

			Debug.WriteLine("Einde: PersoonController.CancelButton");
		}

		#region Actions
		[Action("WijzigFotoClicked:")]
		public void WijzigFotoClicked(NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.WijzigFotoClicked");

			var dlg = NSOpenPanel.OpenPanel;
			dlg.CanChooseFiles = true;
			dlg.CanChooseDirectories = false;
			dlg.AllowedFileTypes = new string[] { "jpg", "jpeg", "png", "tiff" };

			if (dlg.RunModal() == 1)
			{
				// Nab the first file
				var url = dlg.Urls[0];

				if (url != null)
				{
					var path = url.Path;
					Persoon.Imagepath = url.Path;
				}
			}
		}

		#region Gevolgde Opleidingen
		[Action("GevolgdeOpleidingAddClicked:")]
		public void GevolgdeOpleidingAddClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.GevolgdeOpleidingAddClicked");

			PerformSegue("GevolgdeOpleidingSegue", this);

			Debug.WriteLine("Einde: PersoonController.GevolgdeOpleidingAddClicked");
		}

		[Action("GevolgdeOpleidingRemoveClicked:")]
		public void GevolgdeOpleidingRemoveClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.GevolgdeOpleidingRemoveClicked");

			var selectedRowIndex = (int)GevolgdeOpleidingenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedGevolgdeOpleiding = dsGevolgdeOpleidingen.GevolgdeOpleidingen[selectedRowIndex] as GevolgdeOpleidingModel;

				// Configure alert
				var alert = new NSAlert()
				{
					AlertStyle = NSAlertStyle.Informational,
					InformativeText = $"Weet je zeker dat je de gevolgde opleiding {SelectedGevolgdeOpleiding.OpleidingNaam} wilt verwijderen?\n\nDit kan niet meer ongedaan gemaakt worden.",
					MessageText = $"Delete {SelectedGevolgdeOpleiding.OpleidingNaam}?",
				};
				alert.AddButton("Cancel");
				alert.AddButton("Delete");
				alert.BeginSheetForResponse(this.View.Window, (result) =>
				{
				// Should we delete the requested row?
				if (result == 1001)
					{
						// Remove the given row from the dataset
						SelectedGevolgdeOpleiding.Delete(AppDelegate.Conn);
						dsGevolgdeOpleidingen.GevolgdeOpleidingen.Remove(SelectedGevolgdeOpleiding);
				
						GevolgdeOpleidingenTable.ReloadData();
					}
				});
			}

			Debug.WriteLine("Einde: PersoonController.GevolgdeOpleidingRemoveClicked");
		}

		[Export("GevolgdeOpleidingDoubleClicked:")]
		public void GevolgdeOpleidingDoubleClicked(NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.GevolgdeOpleidingDoubleClicked");

			var selectedRowIndex = (int)GevolgdeOpleidingenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedGevolgdeOpleiding = dsGevolgdeOpleidingen.GevolgdeOpleidingen[selectedRowIndex] as GevolgdeOpleidingModel;

				PerformSegue("GevolgdeOpleidingSegue", this);
			}
			Debug.WriteLine("Einde: PersoonController.GevolgdeOpleidingDoubleClicked");
		}

		#endregion Gevolgde Opleidingen

		#region Aankopen
		[Action("AankoopAddClicked:")]
		public void AankoopAddClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.AankoopAddClicked");

			PerformSegue("AankoopSegue", this);

			Debug.WriteLine("Einde: PersoonController.AankoopAddClicked");
		}

		[Action("AankoopRemoveClicked:")]
		public void AankoopRemoveClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.AankoopRemoveClicked");

			var selectedRowIndex = (int)AankopenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedAankoop = dsAankopen.Aankopen[selectedRowIndex] as AankoopModel;

				// Configure alert
				var alert = new NSAlert()
				{
					AlertStyle = NSAlertStyle.Informational,
					InformativeText = $"Weet je zeker dat je de aankoop van {SelectedAankoop.ApparaatNaam} wilt verwijderen?\n\nDit kan niet meer ongedaan gemaakt worden.",
					MessageText = $"Delete {SelectedAankoop.ApparaatNaam}?",
				};
				alert.AddButton("Cancel");
				alert.AddButton("Delete");
				alert.BeginSheetForResponse(this.View.Window, (result) =>
				{
					// Should we delete the requested row?
					if (result == 1001)
					{
						// Remove the given row from the dataset
						SelectedAankoop.Delete(AppDelegate.Conn);
						dsAankopen.Aankopen.Remove(SelectedAankoop);

						AankopenTable.ReloadData();
					}
				});
			}

			Debug.WriteLine("Einde: PersoonController.AankoopRemoveClicked");
		}

		[Export("AankoopDoubleClicked:")]
		public void AankoopDoubleClicked(NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.AankoopDoubleClicked");

			var selectedRowIndex = (int)AankopenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedAankoop = dsAankopen.Aankopen[selectedRowIndex] as AankoopModel;

				PerformSegue("AankoopSegue", this);
			}
			Debug.WriteLine("Einde: PersoonController.AankoopDoubleClicked");
		}
		#endregion Aankopen

		#region Onderhoud
		[Action("OnderhoudAddClicked:")]
		public void OnderhoudAddClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.OnderhoudAddClicked");

			PerformSegue("OnderhoudSegue", this);

			Debug.WriteLine("Einde: PersoonController.OnderhoudAddClicked");
		}

		[Action("OnderhoudRemoveClicked:")]
		public void OnderhoudRemoveClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.OnderhoudRemoveClicked");

			var selectedRowIndex = (int)OnderhoudTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedOnderhoud = dsOnderhoud.Onderhoud[selectedRowIndex] as InOnderhoudModel;

				// Configure alert
				var alert = new NSAlert()
				{
					AlertStyle = NSAlertStyle.Informational,
					InformativeText = $"Weet je zeker dat je het onderhoud op {SelectedOnderhoud.ApparaatNaam} wilt verwijderen?\n\nDit kan niet meer ongedaan gemaakt worden.",
					MessageText = $"Delete {SelectedOnderhoud.ApparaatNaam}?",
				};
				alert.AddButton("Cancel");
				alert.AddButton("Delete");
				alert.BeginSheetForResponse(this.View.Window, (result) =>
				{
					// Should we delete the requested row?
					if (result == 1001)
					{
						// Remove the given row from the dataset
						SelectedOnderhoud.Delete(AppDelegate.Conn);
						dsOnderhoud.Onderhoud.Remove(SelectedOnderhoud);

						OnderhoudTable.ReloadData();
					}
				});
			}

			Debug.WriteLine("Einde: PersoonController.OnderhoudRemoveClicked");
		}

		[Export("OnderhoudDoubleClicked:")]
		public void OnderhoudDoubleClicked(NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.OnderhoudDoubleClicked");

			var selectedRowIndex = (int)OnderhoudTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedOnderhoud = dsOnderhoud.Onderhoud[selectedRowIndex] as InOnderhoudModel;

				PerformSegue("OnderhoudSegue", this);
			}
			Debug.WriteLine("Einde: PersoonController.OnderhoudDoubleClicked");
		}
		#endregion Onderhoud

		#region Lidmaatschap
		[Action("LidmaatschapAddClicked:")]
		public void LidmaatschapAddClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.LidmaatschapAddClicked");

			PerformSegue("LidmaatschapSegue", this);

			Debug.WriteLine("Einde: PersoonController.LidmaatschapAddClicked");
		}

		[Action("LidmaatschapRemoveClicked:")]
		public void LidmaatschapRemoveClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.LidmaatschapRemoveClicked");

			var selectedRowIndex = (int)LidmaatschappenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedLidmaatschap = dsLidmaatschappen.Lidmaatschappen[selectedRowIndex] as ClublidmaatschapModel;

				// Configure alert
				var alert = new NSAlert()
				{
					AlertStyle = NSAlertStyle.Informational,
					InformativeText = $"Weet je zeker dat je het lidmaatschap op {SelectedLidmaatschap.ClubNaam} wilt verwijderen?\n\nDit kan niet meer ongedaan gemaakt worden.",
					MessageText = $"Delete {SelectedLidmaatschap.ClubNaam}?",
				};
				alert.AddButton("Cancel");
				alert.AddButton("Delete");
				alert.BeginSheetForResponse(this.View.Window, (result) =>
				{
					// Should we delete the requested row?
					if (result == 1001)
					{
						// Remove the given row from the dataset
						SelectedLidmaatschap.Delete(AppDelegate.Conn);
						dsLidmaatschappen.Lidmaatschappen.Remove(SelectedLidmaatschap);

						LidmaatschappenTable.ReloadData();
					}
				});
			}

			Debug.WriteLine("Einde: PersoonController.LidmaatschapRemoveClicked");
		}

		[Export("LidmaatschapDoubleClicked:")]
		public void LidmaatschapDoubleClicked(NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.LidmaatschapDoubleClicked");

			var selectedRowIndex = (int)LidmaatschappenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedLidmaatschap = dsLidmaatschappen.Lidmaatschappen[selectedRowIndex] as ClublidmaatschapModel;

				PerformSegue("LidmaatschapSegue", this);
			}
			Debug.WriteLine("Einde: PersoonController.LidmaatschapDoubleClicked");
		}
		#endregion Lidmaatschap
		#endregion

		#region Events
		public delegate void PersonModifiedDelegate(PersoonModel persoon);
		public event PersonModifiedDelegate PersonModified;

		internal void RaisePersonModified(PersoonModel persoon)
		{
			Debug.WriteLine("Start: PersoonController.RaisePersonModified");

			if (this.PersonModified != null) this.PersonModified(persoon);
		
			Debug.WriteLine("Einde: PersoonController.RaisePersonModified");
		}
		#endregion

		internal void LoadTables()
		{
			Debug.WriteLine("Start: PersoonController.LoadTables");

			if (dsGevolgdeOpleidingen != null)
			{
				dsGevolgdeOpleidingen.GevolgdeOpleidingen.Clear();
			}
			dsGevolgdeOpleidingen = new GevolgdeOpleidingenDS(AppDelegate.Conn, Persoon);
			if (GevolgdeOpleidingenTable != null)
			{
				// Populate the Product Table
				GevolgdeOpleidingenTable.DataSource = dsGevolgdeOpleidingen;
				GevolgdeOpleidingenTable.Delegate = new GevolgdeOpleidingenDelegate(dsGevolgdeOpleidingen);
			}

			if (dsAankopen != null)
			{
				dsAankopen.Aankopen.Clear();
			}
			dsAankopen = new AankopenDS(AppDelegate.Conn, Persoon);
			if (AankopenTable != null)
			{
				// Populate the Product Table
				AankopenTable.DataSource = dsAankopen;
				AankopenTable.Delegate = new AankopenDelegate(dsAankopen);
			}

			if (dsOnderhoud != null)
			{
				dsOnderhoud.Onderhoud.Clear();
			}
			dsOnderhoud = new OnderhoudDS(AppDelegate.Conn, Persoon);
			if (OnderhoudTable != null)
			{
				// Populate the Product Table
				OnderhoudTable.DataSource = dsOnderhoud;
				OnderhoudTable.Delegate = new OnderhoudDelegate(dsOnderhoud);
			}

			if (dsLidmaatschappen != null)
			{
				dsLidmaatschappen.Lidmaatschappen.Clear();
			}
			dsLidmaatschappen = new LidmaatschappenDS(AppDelegate.Conn, Persoon);
			if (LidmaatschappenTable != null)
			{
				// Populate the Product Table
				LidmaatschappenTable.DataSource = dsLidmaatschappen;
				LidmaatschappenTable.Delegate = new LidmaatschappenDelegate(dsLidmaatschappen);
			}

			Debug.WriteLine("Einde: PersoonController.LoadTables");
		}
	}
}
