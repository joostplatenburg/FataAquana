// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Diagnostics;

namespace FataAquana
{
	public partial class PersoonController : NSViewController
	{
		#region private variables
		private PersonenController _parentController;
		private PersoonModel _persoon;

		private GevolgdeOpleidingenDS dsGevolgdeOpleidingen = null;
		private AankopenDS dsAankopen = null;
		private OnderhoudDS dsOnderhoud = null;
		private LidmaatschappenDS dsLidmaatschappen = null;

		public GevolgdeOpleidingModel SelectedGevolgdeOpleiding;
		public AankoopModel SelectedAankoop;
		public InOnderhoudModel SelectedOnderhoud;
		public ClublidmaatschapModel SelectedLidmaatschap;
		#endregion

		#region Constructors
		public PersoonController(IntPtr handle) : base (handle)
		{
		}
		#endregion

		public override void AwakeFromNib()
		{
			Debug.WriteLine("Start: PersoonController.AwakeFromNib");

			base.AwakeFromNib();

			_parentController = this.PresentingViewController as PersonenController;
			if (_parentController != null)
			{
				Persoon = _parentController.SelectedPersoon;

				if (Persoon != null)
				{
					LoadTables();
				}
				else
				{
					Persoon = new PersoonModel();
				}
			}

			Debug.WriteLine("Einde: PersoonController.AwakeFromNib");
		}

		[Export("Persoon")]
		public PersoonModel Persoon
		{
			get { return _persoon; }
			set
			{
				WillChangeValue("Persoon");
				_persoon = value;
				DidChangeValue("Persoon");
			}
		}

		partial void SaveButton(NSButton sender)
		{
			Debug.WriteLine("Start: PersoonController.CancelButton");

			if (_parentController.SelectedPersoon != null)
			{
				Persoon.Update(AppDelegate.Conn);
			}
			else
			{
				Persoon.Create(AppDelegate.Conn);
			}

			if (_parentController != null)
			{
				_parentController.ReloadTable();
			}

			DismissController(this);

			Debug.WriteLine("Einde: PersoonController.CancelButton");
		}

		partial void CancelButton(NSButton sender)
		{
			Debug.WriteLine("Start: PersoonController.CancelButton");

			DismissController(this);

			Debug.WriteLine("Einde: PersoonController.CancelButton");
		}

		#region Actions
		[Action("WijzigFotoClicked:")]
		public void WijzigFotoClicked(NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.WijzigFotoClicked");

			var dlg = NSOpenPanel.OpenPanel;
			dlg.CanChooseFiles = true;
			dlg.CanChooseDirectories = false;
			dlg.AllowedFileTypes = new string[] { "jpg", "jpeg", "png", "tiff" };

			if (dlg.RunModal() == 1)
			{
				// Nab the first file
				var url = dlg.Urls[0];

				if (url != null)
				{
					var path = url.Path;
					Persoon.Imagepath = url.Path;
				}
			}
		}

		#region Gevolgde Opleidingen
		[Action("GevolgdeOpleidingAddClicked:")]
		public void GevolgdeOpleidingAddClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.GevolgdeOpleidingAddClicked");

			PerformSegue("GevolgdeOpleidingSegue", this);

			Debug.WriteLine("Einde: PersoonController.GevolgdeOpleidingAddClicked");
		}

		[Action("GevolgdeOpleidingRemoveClicked:")]
		public void GevolgdeOpleidingRemoveClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.GevolgdeOpleidingRemoveClicked");

			var selectedRowIndex = (int)GevolgdeOpleidingenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedGevolgdeOpleiding = dsGevolgdeOpleidingen.GevolgdeOpleidingen[selectedRowIndex] as GevolgdeOpleidingModel;
				SelectedGevolgdeOpleiding.Delete(AppDelegate.Conn);

				LoadTables();
			}

			Debug.WriteLine("Einde: PersoonController.GevolgdeOpleidingRemoveClicked");
		}

		[Export("GevolgdeOpleidingDoubleClicked:")]
		public void GevolgdeOpleidingDoubleClicked(NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.GevolgdeOpleidingDoubleClicked");

			var selectedRowIndex = (int)GevolgdeOpleidingenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedGevolgdeOpleiding = dsGevolgdeOpleidingen.GevolgdeOpleidingen[selectedRowIndex] as GevolgdeOpleidingModel;

				PerformSegue("GevolgdeOpleidingSegue", this);
			}
			Debug.WriteLine("Einde: PersoonController.GevolgdeOpleidingDoubleClicked");
		}

		#endregion Gevolgde Opleidingen

		#region Aankopen
		[Action("AankoopAddClicked:")]
		public void AankoopAddClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.AankoopAddClicked");

			PerformSegue("AankoopSegue", this);

			Debug.WriteLine("Einde: PersoonController.AankoopAddClicked");
		}

		[Action("AankoopRemoveClicked:")]
		public void AankoopRemoveClicked(Foundation.NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.AankoopRemoveClicked");

			var selectedRowIndex = (int)AankopenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedAankoop = dsAankopen.Aankopen[selectedRowIndex] as AankoopModel;
				SelectedAankoop.Delete(AppDelegate.Conn);

				LoadTables();
			}

			Debug.WriteLine("Einde: PersoonController.AankoopRemoveClicked");
		}

		[Export("AankoopDoubleClicked:")]
		public void AankoopDoubleClicked(NSObject sender)
		{
			Debug.WriteLine("Start: PersoonController.AankoopDoubleClicked");

			var selectedRowIndex = (int)AankopenTable.SelectedRow;
			if (selectedRowIndex >= 0)
			{
				SelectedAankoop = dsAankopen.Aankopen[selectedRowIndex] as AankoopModel;

				PerformSegue("AankoopSegue", this);
			}
			Debug.WriteLine("Einde: PersoonController.AankoopDoubleClicked");
		}

		#endregion Aankopen
		#endregion

		#region Events
		public delegate void PersonModifiedDelegate(PersoonModel persoon);
		public event PersonModifiedDelegate PersonModified;

		internal void RaisePersonModified(PersoonModel persoon)
		{
			Debug.WriteLine("Start: PersoonController.RaisePersonModified");

			if (this.PersonModified != null) this.PersonModified(persoon);
		
			Debug.WriteLine("Einde: PersoonController.RaisePersonModified");
		}
		#endregion

		internal void LoadTables()
		{
			Debug.WriteLine("Start: PersoonController.LoadTables");

			if (dsGevolgdeOpleidingen != null)
			{
				dsGevolgdeOpleidingen.GevolgdeOpleidingen.Clear();
			}
			dsGevolgdeOpleidingen = new GevolgdeOpleidingenDS(AppDelegate.Conn, Persoon);
			if (GevolgdeOpleidingenTable != null)
			{
				// Populate the Product Table
				GevolgdeOpleidingenTable.DataSource = dsGevolgdeOpleidingen;
				GevolgdeOpleidingenTable.Delegate = new GevolgdeOpleidingenDelegate(dsGevolgdeOpleidingen);
			}

			if (dsAankopen != null)
			{
				dsAankopen.Aankopen.Clear();
			}
			dsAankopen = new AankopenDS(AppDelegate.Conn, Persoon);
			if (AankopenTable != null)
			{
				// Populate the Product Table
				AankopenTable.DataSource = dsAankopen;
				AankopenTable.Delegate = new AankopenDelegate(dsAankopen);
			}

			if (dsOnderhoud != null)
			{
				dsOnderhoud.Onderhoud.Clear();
			}
			dsOnderhoud = new OnderhoudDS(AppDelegate.Conn, Persoon);
			if (OnderhoudTable != null)
			{
				// Populate the Product Table
				OnderhoudTable.DataSource = dsOnderhoud;
				OnderhoudTable.Delegate = new OnderhoudDelegate(dsOnderhoud);
			}

			if (dsLidmaatschappen != null)
			{
				dsLidmaatschappen.Lidmaatschappen.Clear();
			}
			dsLidmaatschappen = new LidmaatschappenDS(AppDelegate.Conn, Persoon);
			if (LidmaatschappenTable != null)
			{
				// Populate the Product Table
				LidmaatschappenTable.DataSource = dsLidmaatschappen;
				LidmaatschappenTable.Delegate = new LidmaatschappenDelegate(dsLidmaatschappen);
			}

			Debug.WriteLine("Einde: PersoonController.LoadTables");
		}
	}
}
