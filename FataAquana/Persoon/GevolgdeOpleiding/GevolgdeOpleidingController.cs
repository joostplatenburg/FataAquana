// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.Diagnostics;
using Mono.Data.Sqlite;
using System.Data;
using System.Collections.Generic;

namespace FataAquana
{
	public partial class GevolgdeOpleidingController : NSViewController
	{
		public List<OpleidingModel> Opleidingen { get; set; } = new List<OpleidingModel>();

		public GevolgdeOpleidingController (IntPtr handle) : base (handle)
		{
			
		}

		partial void CloseButton(NSObject sender)
		{
			Debug.WriteLine("Start: GevolgdeOpleidingController.CloseButton");

			//if (OpleidingenCombobox.SelectedValue)
			//{
			//	var gevolgdeOpleiding = new GevolgdeOpleidingModel();

			//	gevolgdeOpleiding.PersoonID = AppDelegate.SelectedPersoon.ID;
			//	gevolgdeOpleiding.OpleidingID = "";

			//}
			//else
			//{
			//	Debug.WriteLine("GevolgdeOpleidingController.CloseButton - Geen selectie");
			//}

			DismissController(this);

			Debug.WriteLine("Einde: GevolgdeOpleidingController.CloseButton");
		}

		#region Override Methods
		public override void AwakeFromNib()
		{
			//base.AwakeFromNib();

			if (OpleidingenCombobox != null)
			{
				OpleidingenCombobox.UsesDataSource = true;
				OpleidingenCombobox.Completes = true;
				OpleidingenCombobox.DataSource = new OpleidingenComboDS();
			}
		}
		#endregion

			/*
			var sheet = new GevolgdeOpleidingEditSheetController(newGevolgdeOpleiding, true);
			// Wire-up
			sheet.GevolgdeOpleidingModified += (gevolgdeopleiding) =>
			{ /*
				// Save person to database
				persoon.Create(AppDelegate.Conn);

				if (PersonenTable != null)
				{
					ds.AddPersoon(persoon);
					ReloadTable();
				} 
			};

			// Display sheet
			sheet.ShowSheet(NSApplication.SharedApplication.KeyWindow);
		*/

			
	void LoadOpleidingen(SqliteConnection conn)
		{
			bool shouldClose = false;

			// Is the database already open?
			if (conn.State != ConnectionState.Open)
			{
				shouldClose = true;
				conn.Open();
			}

			// Execute query
			using (var command = conn.CreateCommand())
			{
				try
				{
					// Create new command
					command.CommandText = "SELECT DISTINCT ID FROM [Opleiding]";

					using (var reader = command.ExecuteReader())
					{
						while (reader.Read())
						{
							var opleiding = new OpleidingModel();
							var id = (string)reader["ID"];

							opleiding.Load(conn, id);

							Opleidingen.Add(opleiding);
						}
					}
				}
				catch (Exception Exception)
				{
					Debug.WriteLine(Exception.Message);
				}
			}

			if (shouldClose)
			{
				conn.Close();
			}
		}


	}
}
